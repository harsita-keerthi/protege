# pip install google-generativeai
# pip install python-dotenv

import os
import google.generativeai as genai
from dotenv import load_dotenv

# load environment variables
load_dotenv()

# configure the Generative AI API
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# function to create a lesson plan
def create_lesson_plan(topic, weeks_to_learn, hours_per_day):
    # set up generation configuration
    generation_config = {
        "temperature": 0.5,
        "top_p": 0.95,
        "top_k": 64,
        "max_output_tokens": 8192,
        "response_mime_type": "application/json",
    }

    # create the generative model
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=generation_config,
        system_instruction="You are an AI designed to generate customized lesson plans for students based on their available time and learning goals. Given a topic, number of weeks left to learn the topic, and number of hours the student can commit to learning per day, your task is to create a lesson plan in table format that fits within the studentâ€™s schedule, dividing topics into manageable sections for efficient learning.",
    )

    # construct the user prompt
    user_prompt = f"topic: {topic}. number of weeks: {weeks_to_learn}. number of hours per day: {hours_per_day}"

    # initialize history
    history = []

    # start a chat session
    chat_session = model.start_chat(history=history)

    # send the message and get a response from the model
    response = chat_session.send_message(user_prompt)

    # get the model's response
    model_response = response.text

    # append the user input and model response to the history (optional for tracking)
    history.append({"role": "user", "parts": [user_prompt]})
    history.append({"role": "model", "parts": [model_response]})

    return model_response  # return the lesson plan generated by the model